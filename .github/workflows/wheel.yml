name: Python wheels

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Clean any prebuilt native libs
        shell: bash
        run: rm -f python/tacozip/libtacozip.* || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.*

      # - name: Set up QEMU (for aarch64)
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     platforms: arm64

      - name: Build wheels with cibuildwheel
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686 *-musllinux_*"

          # architectures
          CIBW_ARCHS_LINUX: "x86_64"          # add aarch64 if you enable QEMU
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"

          # manylinux policy
          CIBW_MANYLINUX_X86_64: manylinux2014

          # macOS environment
          CIBW_ENVIRONMENT_MACOS: |
            MACOSX_DEPLOYMENT_TARGET=11.0

          # ---- build native lib inside cibw envs ----
          CIBW_BEFORE_ALL_LINUX: >
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build &&
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DTACOZIP_ENABLE_IPO=OFF &&
              cmake --build build -j &&
              mkdir -p python/tacozip &&
              cp build/libtacozip.so python/tacozip/
            "
          CIBW_BEFORE_ALL_MACOS: >
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build &&
              cmake -S . -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DTACOZIP_ENABLE_IPO=OFF \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} \
                ${CIBW_ARCHS:+-DCMAKE_OSX_ARCHITECTURES=${CIBW_ARCHS}} &&
              cmake --build build -j &&
              mkdir -p python/tacozip &&
              cp build/libtacozip.dylib python/tacozip/
            "
          CIBW_BEFORE_ALL_WINDOWS: >
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build &&
              cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release &&
              cmake --build build -j &&
              mkdir -p python/tacozip &&
              cp build/tacozip.dll python/tacozip/ || cp build/Release/tacozip.dll python/tacozip/
            "
        run: |
          cibuildwheel python --output-dir wheelhouse
          ls -l wheelhouse

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI (on tag)
    needs: build-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: List artifacts to publish
        shell: bash
        run: |
          echo "Files in dist/:"
          ls -l dist || true
          echo "Wheel files:"
          find dist -type f -name '*.whl' -print || true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages_dir: dist
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
          # repository-url: https://test.pypi.org/legacy/
