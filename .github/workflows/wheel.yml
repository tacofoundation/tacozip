# =============================================================================
# Python Wheel Build Configuration for tacozip with Auto-Version Detection
# =============================================================================
# This workflow builds cross-platform wheels for tacozip with embedded libzip.
# Features automatic detection of latest libzip and zlib versions from GitHub.

name: Python wheels

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
  workflow_dispatch:

jobs:
  # ===========================================================================
  # Version Detection Job
  # ===========================================================================
  detect-versions:
    name: Detect latest dependency versions
    runs-on: ubuntu-latest
    outputs:
      libzip-version: ${{ steps.get-versions.outputs.libzip-version }}
      zlib-version: ${{ steps.get-versions.outputs.zlib-version }}
    
    steps:
      - name: Get latest versions from GitHub API
        id: get-versions
        run: |
          echo "Detecting latest versions..."
          
          # Get latest libzip version
          LIBZIP_VERSION=$(curl -s https://api.github.com/repos/nih-at/libzip/releases/latest | \
            jq -r '.tag_name' | sed 's/^v//')
          echo "Latest libzip: $LIBZIP_VERSION"
          echo "libzip-version=$LIBZIP_VERSION" >> $GITHUB_OUTPUT
          
          # Get latest zlib version  
          ZLIB_VERSION=$(curl -s https://api.github.com/repos/madler/zlib/releases/latest | \
            jq -r '.tag_name' | sed 's/^v//')
          echo "Latest zlib: $ZLIB_VERSION"
          echo "zlib-version=$ZLIB_VERSION" >> $GITHUB_OUTPUT
          
          echo "============================================="
          echo "Auto-detected versions:"
          echo "  libzip: $LIBZIP_VERSION"
          echo "  zlib:   $ZLIB_VERSION"
          echo "============================================="

  # ===========================================================================
  # Wheel Building Job
  # ===========================================================================
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: detect-versions
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # Use detected versions
    env:
      LIBZIP_VERSION: ${{ needs.detect-versions.outputs.libzip-version }}
      ZLIB_VERSION: ${{ needs.detect-versions.outputs.zlib-version }}
      CMAKE_BUILD_TYPE: "Release"
      LIBZIP_INSTALL_PREFIX_UNIX: "/usr/local"
      LIBZIP_INSTALL_PREFIX_WIN: "C:/deps"

    steps:
      # -----------------------------------------------------------------------
      # Repository Setup
      # -----------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Display detected versions
        run: |
          echo "============================================="
          echo "Building with auto-detected versions:"
          echo "  libzip: ${{ env.LIBZIP_VERSION }}"
          echo "  zlib:   ${{ env.ZLIB_VERSION }}"
          echo "  Platform: ${{ matrix.os }}"
          echo "============================================="

      - name: Clean existing native libraries
        shell: bash
        run: |
          echo "Cleaning any pre-existing native libraries..."
          rm -f clients/python/tacozip/libtacozip.* clients/python/tacozip/tacozip.dll || true

      - name: Fix newlines for Apple Clang compatibility
        if: runner.os == 'macOS'
        run: |
          echo "Adding newlines to source files for Apple Clang..."
          echo "" >> include/tacozip.h
          echo "" >> src/tacozip.c

      # -----------------------------------------------------------------------
      # Python and Build Tools Setup
      # -----------------------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up QEMU for ARM64 emulation (Linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Verify ARM64 container compatibility
        if: runner.os == 'Linux'
        run: |
          echo "Testing ARM64 container compatibility..."
          docker run --rm --platform linux/arm64 quay.io/pypa/manylinux2014_aarch64:2025.04.19-1 uname -m

      - name: Install cibuildwheel
        shell: bash
        run: |
          echo "Installing cibuildwheel..."
          python -m pip install --upgrade pip
          pip install 'cibuildwheel==2.*'

      # -----------------------------------------------------------------------
      # Wheel Building with Platform-Specific libzip Compilation
      # -----------------------------------------------------------------------
      - name: Build wheels with embedded libzip
        shell: bash
        env:
          # Python version selection
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686"

          # =================================================================
          # Linux Configuration (x86_64 + ARM64)
          # =================================================================
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          
          # Build minimal libzip from GitHub source (avoids SSL issues)
          CIBW_BEFORE_BUILD_LINUX: >
            echo "=== Linux: Building libzip v${{ env.LIBZIP_VERSION }} from source ===" &&
            python -m pip install cmake ninja &&
            curl -L https://github.com/nih-at/libzip/archive/refs/tags/v${{ env.LIBZIP_VERSION }}.tar.gz 
            -o libzip-${{ env.LIBZIP_VERSION }}.tar.gz &&
            tar -xzf libzip-${{ env.LIBZIP_VERSION }}.tar.gz &&
            cmake -S libzip-${{ env.LIBZIP_VERSION }} -B build-libzip
            -DCMAKE_INSTALL_PREFIX="${{ env.LIBZIP_INSTALL_PREFIX_UNIX }}"
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
            -DBUILD_SHARED_LIBS=ON
            -DENABLE_COMMONCRYPTO=OFF
            -DENABLE_GNUTLS=OFF
            -DENABLE_MBEDTLS=OFF
            -DENABLE_OPENSSL=OFF
            -DENABLE_WINDOWS_CRYPTO=OFF
            -DENABLE_BZIP2=OFF
            -DENABLE_LZMA=OFF
            -DENABLE_ZSTD=OFF
            -DBUILD_TOOLS=OFF
            -DBUILD_REGRESS=OFF
            -DBUILD_EXAMPLES=OFF
            -DBUILD_DOC=OFF &&
            cmake --build build-libzip -j &&
            cmake --install build-libzip &&
            echo "=== Linux: Building tacozip native library ===" &&
            python {package}/prebuild.py

          # =================================================================
          # macOS Configuration (Universal2: x86_64 + ARM64)
          # =================================================================
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_ENVIRONMENT_MACOS: |
            MACOSX_DEPLOYMENT_TARGET=11.0
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            bash -exc "python -m pip install delocate && 
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          
          # Build universal libzip for both Intel and Apple Silicon
          CIBW_BEFORE_BUILD_MACOS: >
            echo "=== macOS: Building universal libzip v${{ env.LIBZIP_VERSION }} ===" &&
            python -m pip install cmake ninja &&
            curl -L https://github.com/nih-at/libzip/archive/refs/tags/v${{ env.LIBZIP_VERSION }}.tar.gz 
            -o libzip-${{ env.LIBZIP_VERSION }}.tar.gz &&
            tar -xzf libzip-${{ env.LIBZIP_VERSION }}.tar.gz &&
            cmake -S libzip-${{ env.LIBZIP_VERSION }} -B build-libzip
            -DCMAKE_INSTALL_PREFIX="${{ env.LIBZIP_INSTALL_PREFIX_UNIX }}"
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
            -DBUILD_SHARED_LIBS=ON
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
            -DENABLE_COMMONCRYPTO=OFF
            -DENABLE_GNUTLS=OFF
            -DENABLE_MBEDTLS=OFF
            -DENABLE_OPENSSL=OFF
            -DENABLE_WINDOWS_CRYPTO=OFF
            -DENABLE_BZIP2=OFF
            -DENABLE_LZMA=OFF
            -DENABLE_ZSTD=OFF
            -DBUILD_TOOLS=OFF
            -DBUILD_REGRESS=OFF
            -DBUILD_EXAMPLES=OFF
            -DBUILD_DOC=OFF &&
            cmake --build build-libzip -j &&
            sudo cmake --install build-libzip &&
            echo "=== macOS: Building tacozip native library ===" &&
            python {package}/prebuild.py

          # =================================================================
          # Windows Configuration (x64 only)
          # =================================================================
          CIBW_ARCHS_WINDOWS: "AMD64"
          
          # Build both zlib and libzip dependencies from source
          CIBW_BEFORE_BUILD_WINDOWS: >
            echo "=== Windows: Building zlib v${{ env.ZLIB_VERSION }} dependency ===" &&
            python -m pip install cmake ninja &&
            curl -L https://github.com/madler/zlib/archive/refs/tags/v${{ env.ZLIB_VERSION }}.zip 
            -o zlib-${{ env.ZLIB_VERSION }}.zip &&
            powershell -Command "Expand-Archive zlib-${{ env.ZLIB_VERSION }}.zip -DestinationPath ." &&
            cmake -S zlib-${{ env.ZLIB_VERSION }} -B build-zlib 
            -DCMAKE_INSTALL_PREFIX="${{ env.LIBZIP_INSTALL_PREFIX_WIN }}" 
            -DBUILD_SHARED_LIBS=ON &&
            cmake --build build-zlib --config ${{ env.CMAKE_BUILD_TYPE }} &&
            cmake --install build-zlib &&
            echo "=== Windows: Building libzip v${{ env.LIBZIP_VERSION }} ===" &&
            curl -L https://github.com/nih-at/libzip/archive/refs/tags/v${{ env.LIBZIP_VERSION }}.zip 
            -o libzip-${{ env.LIBZIP_VERSION }}.zip &&
            powershell -Command "Expand-Archive libzip-${{ env.LIBZIP_VERSION }}.zip -DestinationPath ." &&
            cmake -S libzip-${{ env.LIBZIP_VERSION }} -B build-libzip
            -DCMAKE_INSTALL_PREFIX="${{ env.LIBZIP_INSTALL_PREFIX_WIN }}"
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
            -DBUILD_SHARED_LIBS=ON
            -DCMAKE_PREFIX_PATH="${{ env.LIBZIP_INSTALL_PREFIX_WIN }}"
            -DENABLE_COMMONCRYPTO=OFF
            -DENABLE_GNUTLS=OFF
            -DENABLE_MBEDTLS=OFF
            -DENABLE_OPENSSL=OFF
            -DENABLE_WINDOWS_CRYPTO=OFF
            -DENABLE_BZIP2=OFF
            -DENABLE_LZMA=OFF
            -DENABLE_ZSTD=OFF
            -DBUILD_TOOLS=OFF
            -DBUILD_REGRESS=OFF
            -DBUILD_EXAMPLES=OFF
            -DBUILD_DOC=OFF &&
            cmake --build build-libzip --config ${{ env.CMAKE_BUILD_TYPE }} &&
            cmake --install build-libzip &&
            echo "=== Windows: Building tacozip native library with DLL bundling ===" &&
            python {package}/prebuild.py

          # Test the built wheels
          CIBW_TEST_COMMAND: >
            python -c "
            import tacozip; 
            tacozip.self_check(); 
            print('✓ tacozip test passed on ${{ matrix.os }}')"

        run: |
          echo "============================================="
          echo "Starting wheel build for ${{ matrix.os }}"
          echo "Auto-detected libzip: ${{ env.LIBZIP_VERSION }}"
          echo "Auto-detected zlib: ${{ env.ZLIB_VERSION }}"
          echo "============================================="
          
          echo "Package contents before build:"
          ls -l clients/python/tacozip || true
          
          # Build wheels for all platforms
          cibuildwheel clients/python --output-dir wheelhouse
          
          echo "============================================="
          echo "✓ Wheels successfully built for ${{ matrix.os }}:"
          ls -lh wheelhouse
          echo "============================================="

      # -----------------------------------------------------------------------
      # Artifact Upload
      # -----------------------------------------------------------------------
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-libzip-${{ env.LIBZIP_VERSION }}
          path: wheelhouse/*.whl
          retention-days: 7

      - name: Create build summary
        run: |
          echo "## Build Summary for ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| libzip | ${{ env.LIBZIP_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| zlib | ${{ env.ZLIB_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Wheels built | $(ls wheelhouse/*.whl 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY

  # ===========================================================================
  # PyPI Publishing (only on version tags)
  # ===========================================================================
  publish:
    name: Publish to PyPI
    needs: [detect-versions, build-wheels]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: List files to publish
        shell: bash
        run: |
          echo "============================================="
          echo "Files ready for PyPI upload:"
          echo "Built with libzip ${{ needs.detect-versions.outputs.libzip-version }}"
          echo "Built with zlib ${{ needs.detect-versions.outputs.zlib-version }}"
          echo "============================================="
          find dist -name "*.whl" -exec ls -lh {} \;
          echo "Total wheels: $(find dist -name '*.whl' | wc -l)"
          echo "============================================="

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages_dir: dist
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
          print-hash: true

      - name: Create release summary
        run: |
          echo "## 🚀 PyPI Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "Successfully published wheels built with:" >> $GITHUB_STEP_SUMMARY
          echo "- **libzip**: ${{ needs.detect-versions.outputs.libzip-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **zlib**: ${{ needs.detect-versions.outputs.zlib-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: Linux (x86_64, ARM64), macOS (Universal2), Windows (x64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Python versions**: 3.9, 3.10, 3.11, 3.12, 3.13" >> $GITHUB_STEP_SUMMARY