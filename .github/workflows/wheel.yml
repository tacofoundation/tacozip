name: Python wheels

on:
 push:
   branches: [main, master]
   tags: ['v*.*.*']
 pull_request:
 workflow_dispatch:

jobs:
 build-wheels:
   name: Build wheels on ${{ matrix.os }}
   runs-on: ${{ matrix.os }}
   strategy:
     fail-fast: false
     matrix:
       os: [ubuntu-latest, macos-latest, windows-latest]

   steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         clean: true

     - name: Clean any prebuilt native libs in package
       shell: bash
       run: rm -f clients/python/tacozip/libtacozip.* clients/python/tacozip/tacozip.dll || true

     - name: Fix newlines for Apple Clang
       if: runner.os == 'macOS'
       run: |
         echo "" >> include/tacozip.h
         echo "" >> src/tacozip.c

     - name: Set up Python
       uses: actions/setup-python@v5
       with:
         python-version: '3.11'

     # Required for aarch64 Linux wheels on x86_64 runners
     - name: Set up QEMU (arm64)
       if: ${{ runner.os == 'Linux' }}
       uses: docker/setup-qemu-action@v3
       with:
         platforms: arm64

     - name: Verify arm64 container runs
       if: ${{ runner.os == 'Linux' }}
       run: docker run --rm --platform linux/arm64 quay.io/pypa/manylinux2014_aarch64:2025.04.19-1 uname -m

     - name: Install cibuildwheel
       shell: bash
       run: |
         python -m pip install --upgrade pip
         pip install 'cibuildwheel==2.*'

     - name: Build wheels with cibuildwheel
       shell: bash
       env:
         CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
         CIBW_SKIP: "pp* *-win32 *-manylinux_i686"

         # ===== Linux =====
         CIBW_ARCHS_LINUX: "x86_64 aarch64"
         CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
         CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014"
         CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
         CIBW_BEFORE_BUILD_LINUX: >
           python -m pip install cmake ninja &&
           python {package}/prebuild.py

         # ===== macOS (universal2) =====
         CIBW_ARCHS_MACOS: "universal2"
         CIBW_ENVIRONMENT_MACOS: |
           MACOSX_DEPLOYMENT_TARGET=11.0
         CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
           bash -exc "python -m pip install delocate && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
         CIBW_BEFORE_BUILD_MACOS: >
           python -m pip install cmake ninja &&
           python {package}/prebuild.py

         # ===== Windows =====
         CIBW_ARCHS_WINDOWS: "AMD64"
         
         # Use CIBW_BEFORE_BUILD instead of CIBW_BEFORE_ALL for more reliable execution
         CIBW_BEFORE_BUILD_WINDOWS: >
           python -m pip install cmake ninja &&
           python {package}/prebuild.py

         # Test command bypasses __main__.py issue
         CIBW_TEST_COMMAND: python -c "import tacozip; tacozip._self_check(); print('tacozip test passed')"
       run: |
         echo "Package contents before wheel build (native lib will be created inside cibuildwheel env):"
         ls -l clients/python/tacozip || true

         cibuildwheel clients/python --output-dir wheelhouse

         echo "Wheels produced:"
         ls -l wheelhouse

     - name: Upload wheels (artifact)
       uses: actions/upload-artifact@v4
       with:
         name: wheels-${{ matrix.os }}
         path: wheelhouse/*.whl

 publish:
   name: Publish to PyPI (on tag)
   needs: build-wheels
   runs-on: ubuntu-latest
   if: startsWith(github.ref, 'refs/tags/v')
   steps:
     - name: Download built wheels
       uses: actions/download-artifact@v4
       with:
         path: dist
         pattern: wheels-*
         merge-multiple: true

     - name: List artifacts to publish
       shell: bash
       run: |
         echo "Files in dist/:"
         ls -l dist || true
         echo "Wheel files:"
         find dist -type f -name '*.whl' -print || true

     - name: Publish to PyPI
       uses: pypa/gh-action-pypi-publish@v1.12.4
       with:
         packages_dir: dist
         user: __token__
         password: ${{ secrets.PYPI_API_TOKEN }}
         skip-existing: true
         verbose: true