name: Python wheels

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install wheel tooling
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.* build==1.* twine==5.*

      # Build libtacozip with CMake and drop the binary into python/tacozip/
      - name: Build native library
        shell: bash
        run: |
          python -m pip install cmake ninja
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DTACOZIP_ENABLE_IPO=ON
          cmake --build build -j

          mkdir -p python/tacozip
          # Copy the right binary name per-OS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            cp build/libtacozip.so python/tacozip/ || cp build/release/libtacozip.so python/tacozip/
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # Depending on the generator, it may live under build/ or build/Release/
            cp build/libtacozip.dylib python/tacozip/ || cp build/Release/libtacozip.dylib python/tacozip/
          else
            # Windows
            # CMake with Ninja + MSVC emits tacozip.dll alongside import lib
            cp build/tacozip.dll python/tacozip/ || cp build/Release/tacozip.dll python/tacozip/
          fi

          ls -l python/tacozip

      # Build wheels for cp39â€“cp312, multi-arch where possible
      - name: Build wheels with cibuildwheel
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686 *-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel -w {dest_dir} -v {wheel}"
          CIBW_BEFORE_BUILD_MACOS: "pip install delocate"
        run: |
          cibuildwheel python --output-dir wheelhouse
          ls -l wheelhouse

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI (on tag)
    needs: build-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages_dir: dist
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
