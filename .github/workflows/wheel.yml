name: Python wheels

on:
  push:
    branches: [main, master]
    tags: ['v*.*.*']
  pull_request:
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Clean any prebuilt native libs in package
        shell: bash
        run: rm -f clients/python/tacozip/libtacozip.* clients/python/tacozip/tacozip.dll || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Required for aarch64 Linux wheels on x86_64 runners
      - name: Set up QEMU (arm64)
        if: ${{ runner.os == 'Linux' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Verify arm64 container runs
        if: ${{ runner.os == 'Linux' }}
        run: docker run --rm --platform linux/arm64 quay.io/pypa/manylinux2014_aarch64:2025.04.19-1 uname -m

      - name: Install cibuildwheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install 'cibuildwheel==2.*'

      - name: Build wheels with cibuildwheel
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686"

          # ===== Linux =====
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

          # ===== macOS (universal2) =====
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_ENVIRONMENT_MACOS: |
            MACOSX_DEPLOYMENT_TARGET=11.0
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            bash -exc "python -m pip install delocate && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

          # ===== Windows =====
          CIBW_ARCHS_WINDOWS: "AMD64"

          # ===== Build native lib (stage into package) =====
          CIBW_BEFORE_ALL_LINUX: |
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build/release &&
              mkdir -p clients/python/tacozip &&
              cp -f README.md clients/python/ || true &&
              cmake -S . -B build/release -G Ninja -DCMAKE_BUILD_TYPE=Release -DTACOZIP_ENABLE_IPO=OFF &&
              cmake --build build/release -j &&
              ls -la build/release/ &&
              lib=\$(find build/release -name 'libtacozip.so.*' -type f | head -n1)
              if [ -z \"\$lib\" ]; then
                lib=\$(find build/release -name 'libtacozip.so' -type f | head -n1)
              fi
              echo \"Found library: \${lib:-NONE}\"
              test -n \"\$lib\" || (echo 'libtacozip.so not found' >&2; exit 2)
              cp \"\$lib\" clients/python/tacozip/libtacozip.so
            "

          CIBW_BEFORE_ALL_MACOS: |
            bash -exc "
              python -m pip install cmake ninja
              rm -rf build/release
              mkdir -p clients/python/tacozip
              cp -f README.md clients/python/ || true
              cmake -S . -B build/release -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DTACOZIP_ENABLE_IPO=OFF \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} \
                -DCMAKE_OSX_ARCHITECTURES='x86_64;arm64'
              cmake --build build/release -j
              ls -l build/release || true
              lib=\$(find build/release -name 'libtacozip.dylib' | head -n 1)
              echo \"Picked DYLIB: \${lib:-NONE}\"
              test -n \"\$lib\" || (echo 'libtacozip.dylib not found' >&2; exit 2)
              cp \"\$lib\" clients/python/tacozip/libtacozip.dylib
            "

          CIBW_BEFORE_ALL_WINDOWS: >
            python -m pip install cmake ninja &&
            if exist build rmdir /s /q build &&
            if not exist clients\python\tacozip mkdir clients\python\tacozip &&
            echo Building tacozip library... &&
            cmake -S . -B build\release -G Ninja -DCMAKE_BUILD_TYPE=Release -DTACOZIP_ENABLE_IPO=OFF &&
            cmake --build build\release -j &&
            echo Build complete, listing build directory: &&
            dir build\release &&
            echo Looking for DLL files... &&
            dir build\release\*.dll 2>nul &&
            echo Copying DLL to package directory... &&
            (copy build\release\tacozip.dll clients\python\tacozip\ && echo Copied tacozip.dll) || 
            (copy build\release\libtacozip.dll clients\python\tacozip\tacozip.dll && echo Copied libtacozip.dll as tacozip.dll) || 
            echo ERROR: No DLL found in build directory &&
            echo Final package contents: &&
            dir clients\python\tacozip 2>nul

          # Test command bypasses __main__.py issue
          CIBW_TEST_COMMAND: python -c "import tacozip; tacozip._self_check(); print('tacozip test passed')"
        run: |
          echo "Package contents before wheel build (native lib will be created inside cibuildwheel env):"
          ls -l clients/python/tacozip || true

          cibuildwheel clients/python --output-dir wheelhouse

          echo "Wheels produced:"
          ls -l wheelhouse

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI (on tag)
    needs: build-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: List artifacts to publish
        shell: bash
        run: |
          echo "Files in dist/:"
          ls -l dist || true
          echo "Wheel files:"
          find dist -type f -name '*.whl' -print || true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages_dir: dist
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true