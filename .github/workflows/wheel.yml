name: Python wheels

on:
  push:
    branches: [main, master]
    tags: ['v*.*.*']
  pull_request:
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Clean any prebuilt native libs
        shell: bash
        run: rm -f clients/python/tacozip/libtacozip.* || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- REQUIRED for aarch64 Linux builds on x86_64 runners ---
      - name: Set up QEMU (arm64)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Optional smoke test so we fail fast if binfmt isnâ€™t registered
      - name: Verify arm64 container runs
        if: runner.os == 'Linux'
        run: |
          docker run --rm --platform linux/arm64 quay.io/pypa/manylinux2014_aarch64:2025.04.19-1 uname -m

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.*

      - name: Build wheels with cibuildwheel
        shell: bash
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686"

          # ===== Linux arches =====
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

          # ===== macOS universal2 =====
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_ENVIRONMENT_MACOS: |
            MACOSX_DEPLOYMENT_TARGET=11.0
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >-
            bash -exc "
              python -m pip install delocate &&
              delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
            "

          # ===== Windows =====
          CIBW_ARCHS_WINDOWS: "AMD64"

          # ===== Build native lib (stage into package) =====
          CIBW_BEFORE_ALL_LINUX: >
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build/release &&
              mkdir -p clients/python/tacozip && : > clients/python/tacozip/__init__.py &&
              cp -f README.md clients/python/ || true &&
              cmake -S . -B build/release -G Ninja -DCMAKE_BUILD_TYPE=Release -DTACOZIP_ENABLE_IPO=OFF &&
              cmake --build build/release -j &&
              cp build/release/libtacozip.so clients/python/tacozip/
            "
          CIBW_BEFORE_ALL_MACOS: >
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build/release &&
              mkdir -p clients/python/tacozip && : > clients/python/tacozip/__init__.py &&
              cp -f README.md clients/python/ || true &&
              cmake -S . -B build/release -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DTACOZIP_ENABLE_IPO=OFF \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} \
                -DCMAKE_OSX_ARCHITECTURES='x86_64;arm64' &&
              cmake --build build/release -j &&
              cp build/release/libtacozip.dylib clients/python/tacozip/
            "
          CIBW_BEFORE_ALL_WINDOWS: >
            bash -exc "
              python -m pip install cmake ninja &&
              rm -rf build/release &&
              mkdir -p clients/python/tacozip && ( [ -f clients/python/tacozip/__init__.py ] || echo > clients/python/tacozip/__init__.py ) &&
              cp -f README.md clients/python/ || true &&
              cmake -S . -B build/release -G Ninja -DCMAKE_BUILD_TYPE=Release &&
              cmake --build build/release -j &&
              # Copy dll from possible locations
              cp build/release/tacozip.dll clients/python/tacozip/ 2>/dev/null || \
              cp build/release/Release/tacozip.dll clients/python/tacozip/
            "
        run: |
          cibuildwheel clients/python --output-dir wheelhouse
          ls -l wheelhouse

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI (on tag)
    needs: build-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: List artifacts to publish
        shell: bash
        run: |
          echo "Files in dist/:"
          ls -l dist || true
          echo "Wheel files:"
          find dist -type f -name '*.whl' -print || true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages_dir: dist
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
